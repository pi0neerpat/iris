datasource DS {
  // optionally set multiple providers
  // example: provider = ["sqlite", "postgresql"]
  provider = ["sqlite", "postgresql"]
  url      = env("DATABASE_URL" )
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

model AuthDetail {
  id        String   @id @default(uuid())
  nonce     String
  timestamp DateTime @default(now())
}

model Hero {
  address String @id
  authDetail AuthDetail
  transactions Transaction[] @relation(name: "heroTransactions")
  quests Quest[]
  merchantAccount Merchant? //@relation(name: "heroMerchantAccount")
  // activeQuest Quest @relation(name: "heroActiveQuest")
}

model Merchant {
  id    String  @id @default(uuid())
  owner Hero? //@relation(name: "heroMerchantAccount")
  quests Quest[] @relation(name: "merchantQuests")
}

model Trigger {
  id String @id @default(uuid())
  quest Quest? @relation(name: "questTrigger")
}

model Quest {
  id String @id @default(uuid())
  merchant Merchant @relation(name: "merchantQuests")
  transactions Transaction[] @relation(name: "questTransactions")
  trigger Trigger @relation(name: "questTrigger")
  heroes Hero[] // Implicit m-n relationships don't require @relation
  heroesActive Hero[] @relation(name: "heroActiveQuest")
  contractAddress String
  chainId String
  abi String
  method String
  purchaseToken Token? @relation(name: "questPurchaseToken")
  purchaseBalance String?
  domain String?
  name String
}

model Token {
  id        String   @id @default(uuid())
  contractAddress String
  quests Quest[] @relation(name: "questPurchaseToken")
  website String?
  iconUrl String?
}



model Transaction {
  id String @id
  timestamp DateTime
  blockNumber String
  status String
  quest Quest @relation(name: "questTransactions")
  hero Hero @relation(name: "heroTransactions")
}
